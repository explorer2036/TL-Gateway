// Code generated by protoc-gen-go. DO NOT EDIT.
// source: report.proto

package gateway

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_Success Status = 0
	Status_Refused Status = 1
	Status_Timeout Status = 2
)

var Status_name = map[int32]string{
	0: "Success",
	1: "Refused",
	2: "Timeout",
}

var Status_value = map[string]int32{
	"Success": 0,
	"Refused": 1,
	"Timeout": 2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3eedb623aa6ca98c, []int{0}
}

type ReportRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportRequest) Reset()         { *m = ReportRequest{} }
func (m *ReportRequest) String() string { return proto.CompactTextString(m) }
func (*ReportRequest) ProtoMessage()    {}
func (*ReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eedb623aa6ca98c, []int{0}
}

func (m *ReportRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportRequest.Unmarshal(m, b)
}
func (m *ReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportRequest.Marshal(b, m, deterministic)
}
func (m *ReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportRequest.Merge(m, src)
}
func (m *ReportRequest) XXX_Size() int {
	return xxx_messageInfo_ReportRequest.Size(m)
}
func (m *ReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportRequest proto.InternalMessageInfo

func (m *ReportRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ReportRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ReportReply struct {
	Status               Status   `protobuf:"varint,1,opt,name=status,proto3,enum=gateway.Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportReply) Reset()         { *m = ReportReply{} }
func (m *ReportReply) String() string { return proto.CompactTextString(m) }
func (*ReportReply) ProtoMessage()    {}
func (*ReportReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eedb623aa6ca98c, []int{1}
}

func (m *ReportReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportReply.Unmarshal(m, b)
}
func (m *ReportReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportReply.Marshal(b, m, deterministic)
}
func (m *ReportReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportReply.Merge(m, src)
}
func (m *ReportReply) XXX_Size() int {
	return xxx_messageInfo_ReportReply.Size(m)
}
func (m *ReportReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReportReply proto.InternalMessageInfo

func (m *ReportReply) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_Success
}

func init() {
	proto.RegisterEnum("gateway.Status", Status_name, Status_value)
	proto.RegisterType((*ReportRequest)(nil), "gateway.ReportRequest")
	proto.RegisterType((*ReportReply)(nil), "gateway.ReportReply")
}

func init() { proto.RegisterFile("report.proto", fileDescriptor_3eedb623aa6ca98c) }

var fileDescriptor_3eedb623aa6ca98c = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x37, 0x8b, 0x66, 0x71, 0x76, 0xd5, 0x32, 0x14, 0x29, 0x9e, 0x4a, 0x2f, 0x16, 0x0f,
	0x15, 0x2a, 0x88, 0xfe, 0x04, 0xaf, 0xa9, 0x7f, 0x20, 0xb6, 0xa3, 0x14, 0xab, 0x89, 0xc9, 0x44,
	0xe9, 0xbf, 0x97, 0xa6, 0xad, 0x20, 0xde, 0xe6, 0x7d, 0x8f, 0xc7, 0x9b, 0x07, 0x07, 0x47, 0xd6,
	0x38, 0xae, 0xac, 0x33, 0x6c, 0x70, 0xf7, 0xaa, 0x99, 0xbe, 0xf5, 0x58, 0x3c, 0xc0, 0xa9, 0x8a,
	0x86, 0xa2, 0xcf, 0x40, 0x9e, 0x31, 0x85, 0x63, 0x36, 0x6f, 0xf4, 0x91, 0x89, 0x5c, 0x94, 0x27,
	0x6a, 0x16, 0x88, 0x70, 0xd4, 0x69, 0xd6, 0xd9, 0x36, 0x17, 0xe5, 0x41, 0xc5, 0xbb, 0xb8, 0x83,
	0xfd, 0x1a, 0xb5, 0xc3, 0x88, 0x57, 0x20, 0x3d, 0x6b, 0x0e, 0x3e, 0x26, 0xcf, 0xea, 0xf3, 0x6a,
	0xe9, 0xa8, 0x9a, 0x88, 0xd5, 0x62, 0x5f, 0xdf, 0x80, 0x9c, 0x09, 0xee, 0x61, 0xd7, 0x84, 0xb6,
	0x25, 0xef, 0x93, 0xcd, 0x24, 0x14, 0xbd, 0x04, 0x4f, 0x5d, 0x22, 0x26, 0xf1, 0xd4, 0xbf, 0x93,
	0x09, 0x9c, 0x6c, 0xeb, 0xc7, 0xf5, 0xc7, 0x86, 0xdc, 0x57, 0xdf, 0x12, 0xde, 0x83, 0x9c, 0x01,
	0x5e, 0xfc, 0x96, 0xfc, 0x59, 0x71, 0x99, 0xfe, 0xe3, 0x76, 0x18, 0x8b, 0xcd, 0xb3, 0x8c, 0xf3,
	0x6f, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x12, 0x75, 0x47, 0x41, 0x0e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReportServiceClient is the client API for ReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReportServiceClient interface {
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportReply, error)
}

type reportServiceClient struct {
	cc *grpc.ClientConn
}

func NewReportServiceClient(cc *grpc.ClientConn) ReportServiceClient {
	return &reportServiceClient{cc}
}

func (c *reportServiceClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportReply, error) {
	out := new(ReportReply)
	err := c.cc.Invoke(ctx, "/gateway.ReportService/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportServiceServer is the server API for ReportService service.
type ReportServiceServer interface {
	Report(context.Context, *ReportRequest) (*ReportReply, error)
}

// UnimplementedReportServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReportServiceServer struct {
}

func (*UnimplementedReportServiceServer) Report(ctx context.Context, req *ReportRequest) (*ReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}

func RegisterReportServiceServer(s *grpc.Server, srv ReportServiceServer) {
	s.RegisterService(&_ReportService_serviceDesc, srv)
}

func _ReportService_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.ReportService/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).Report(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.ReportService",
	HandlerType: (*ReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Report",
			Handler:    _ReportService_Report_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "report.proto",
}
